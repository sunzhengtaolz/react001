{"ast":null,"code":"var _jsxFileName = \"/Users/sunzhengtao/Pro/Git/react001/src/components/tools/EasyDragSort.jsx\";\nimport React from 'react';\nvar curDragIndex = null;\nexport default function EasyDragSort(props) {\n  var _this = this;\n\n  var container = props.children;\n\n  onChange = function onChange(from, to) {\n    if (from === to) return;\n    var curValue = props.data;\n\n    var newValue = _this.arrMove(curValue, from, to);\n\n    if (typeof props.onChange === 'function') {\n      return props.onChange(newValue, from, to);\n    }\n  };\n\n  return;\n  React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, container.map(function (item, index) {\n    if (React.isValidElement(item)) {\n      return React.cloneElement(item, {\n        draggable: \"true\",\n        onDragStart: function onDragStart() {\n          curDragIndex = index;\n        },\n        onDragEnter: function onDragEnter() {\n          onChange(curDragIndex, index);\n          curDragIndex = index;\n        },\n        onDragEnd: function onDragEnd() {\n          curDragIndex = null;\n\n          if (typeof props.onDragEnd === 'function') {\n            props.onDragEnd();\n          }\n        }\n      });\n    }\n\n    return item;\n  }));\n}\n\narrMove = function arrMove(arr, fromIndex, toIndex) {\n  arr = [].concat(arr);\n  var item = arr.splice(fromIndex, 1)[0];\n  arr.splice(toIndex, 0, item);\n  return arr;\n};","map":{"version":3,"sources":["/Users/sunzhengtao/Pro/Git/react001/src/components/tools/EasyDragSort.jsx"],"names":["React","curDragIndex","EasyDragSort","props","container","children","onChange","from","to","curValue","data","newValue","arrMove","map","item","index","isValidElement","cloneElement","draggable","onDragStart","onDragEnter","onDragEnd","arr","fromIndex","toIndex","concat","splice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACvC,MAAIC,SAAS,GAAGD,KAAK,CAACE,QAAtB;;AACAC,EAAAA,QAAQ,GAAG,kBAACC,IAAD,EAAOC,EAAP,EAAc;AACvB,QAAGD,IAAI,KAAKC,EAAZ,EAAiB;AACjB,QAAIC,QAAQ,GAAGN,KAAK,CAACO,IAArB;;AACA,QAAIC,QAAQ,GAAG,KAAI,CAACC,OAAL,CAAaH,QAAb,EAAuBF,IAAvB,EAA6BC,EAA7B,CAAf;;AACA,QAAG,OAAOL,KAAK,CAACG,QAAb,KAA0B,UAA7B,EAAwC;AACtC,aAAOH,KAAK,CAACG,QAAN,CAAeK,QAAf,EAAyBJ,IAAzB,EAA+BC,EAA/B,CAAP;AACD;AACF,GAPD;;AAQA;AACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACOJ,SAAS,CAACS,GAAV,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAe;AAC9B,QAAGf,KAAK,CAACgB,cAAN,CAAqBF,IAArB,CAAH,EAA8B;AAC5B,aAAOd,KAAK,CAACiB,YAAN,CAAmBH,IAAnB,EAAyB;AAC9BI,QAAAA,SAAS,EAAC,MADoB;AAE9BC,QAAAA,WAAW,EAAE,uBAAM;AACjBlB,UAAAA,YAAY,GAAGc,KAAf;AACD,SAJ6B;AAK9BK,QAAAA,WAAW,EAAE,uBAAM;AACjBd,UAAAA,QAAQ,CAACL,YAAD,EAAec,KAAf,CAAR;AACAd,UAAAA,YAAY,GAAGc,KAAf;AACD,SAR6B;AAS9BM,QAAAA,SAAS,EAAE,qBAAM;AACfpB,UAAAA,YAAY,GAAG,IAAf;;AACA,cAAG,OAAOE,KAAK,CAACkB,SAAb,KAA2B,UAA9B,EAAyC;AACvClB,YAAAA,KAAK,CAACkB,SAAN;AACD;AACF;AAd6B,OAAzB,CAAP;AAgBD;;AACD,WAAOP,IAAP;AACD,GApBE,CADP;AAuBL;;AAEDF,OAAO,GAAG,iBAACU,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,EAA6B;AACrCF,EAAAA,GAAG,GAAG,GAAGG,MAAH,CAAUH,GAAV,CAAN;AACA,MAAIR,IAAI,GAAGQ,GAAG,CAACI,MAAJ,CAAWH,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAX;AACAD,EAAAA,GAAG,CAACI,MAAJ,CAAWF,OAAX,EAAqB,CAArB,EAAwBV,IAAxB;AACA,SAAOQ,GAAP;AACD,CALD","sourcesContent":["import React from 'react'\n\nlet curDragIndex = null;\n\nexport default function EasyDragSort(props){\n    let container = props.children;\n    onChange = (from, to) => {\n      if(from === to ) return ;\n      let curValue = props.data;\n      let newValue = this.arrMove(curValue, from, to);\n      if(typeof props.onChange === 'function'){\n        return props.onChange(newValue, from ,to);\n      }\n    } \n    return \n      <div>\n            {container.map((item, index)=>{\n            if(React.isValidElement(item)){\n              return React.cloneElement(item, {\n                draggable:\"true\", \n                onDragStart: () => {\n                  curDragIndex = index\n                },\n                onDragEnter: () => {\n                  onChange(curDragIndex, index)\n                  curDragIndex = index;\n                },\n                onDragEnd: () => {\n                  curDragIndex = null;\n                  if(typeof props.onDragEnd === 'function'){\n                    props.onDragEnd()\n                  }\n                }\n              })\n            }\n            return item;\n          })}\n      </div>;\n}\n\narrMove = (arr, fromIndex, toIndex) => {\n  arr = [].concat(arr);\n  let item = arr.splice(fromIndex, 1)[0];\n  arr.splice(toIndex , 0, item);\n  return arr;\n}"]},"metadata":{},"sourceType":"module"}